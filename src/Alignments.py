import os;
import pylab
from io import StringIO;
from Bio import AlignIO
from Bio import Phylo
from Bio.Align import AlignInfo
from Bio.Align.Applications import MuscleCommandline
from Bio.Align.Applications import ClustalwCommandline


def clustal_align(input_file, path):
	"""
	Generates the aling file (*.aln*) and the PhyloTree file (*.dnd*) using ClustalW
	
	:param input_file: it's the name of a FASTA sequence(s) file.	Ex.:"opuntia.fasta"
	
	:param path: it's the ubication of ClustalW CommanLine Ex.:"/home/user/Desktop/clustalw2"
	
	:returns: aling file (*.aln*) and PhyloTree file (*.dnd*) in your directory
	"""
	assert os.path.isfile(path), "Clustal W executable missing"
	cline = ClustalwCommandline(path, infile=input_file)
	cline()

def muscle_align(input_file,output_file):
	"""
	Generates the aling file (*.aln) compatible with ClustalW using Muscle

	:param input_file: it's the name of a FASTA sequence(s) file.	Ex.:"opuntia.fasta"

	:param output_file: it's the file name used for the MULSCLE output with "aln" extension. 	Ex.:"opuntia.aln" 

	:returns: aling file (*.aln*) in your directory
	"""
	cline = MuscleCommandline(input=input_file, out=output_file,clw=True)
	cline()

def show_align(input_file,file_type):
	"""
	Shows the synthesized aling conteined in the input file

	:param input_file: it's the name of a alignment file. Ex.: "opuntia.aln"

	:param file_type: it's an string refering to the alignment type. Ex.: "clustal" 
	"""
	align = get_align(input_file,file_type)
	print(align)

def show_complite_align(input_file,file_type):
	"""
	Shows the complite aling conteined in the input file 

	:param input_file: it's the name of a alignment file. Ex.: "opuntia.aln"

	:param file_type: it's an string refering to the alignment type. Ex.: "clustal" 
	"""
	align = get_align(input_file,file_type)
	for record in align:
		informer.insert(INSERT,"\n%s - %s \n" % (record.seq, record.id))

def get_align(input_file,file_type):
	"""
	Gets the aling data form the input file

	:param input_file: it's the name of a alignment file. Ex.: "opuntia.aln"

	:param file_type: it's an string refering the alignment type. Ex.: "clustal" 

	:returns: MultipleSeqAlignment object
	"""
	align = AlignIO.read(input_file, file_type)
	return align

def show_tree(input_file):
	"""
	Shows the tree based in PhyloTree file (*.dnd) 

	:param input_file: it's the name of a PhyloTree file. Ex.: "opuntia.dnd" 
	"""
	tree = Phylo.read(input_file, "newick");
	Phylo.draw_ascii(tree);

def get_tree(input_file):
	"""
	Gets the Phylo tree from the input file

	:param input_file: it's a string that specifies the name and format file

	:returns: Phylo tree object
	"""
	return Phylo.read(input_file, "newick");

def save_tree(file_name,tree):
	"""
	Save the tree generated by Phylo in an image or pdf (It will depent on the extension used) 

	:param file_name: it's a string that specifies the name and format file

	:param tree: Phylo tree data
	"""
	pylab.savefig(file_name, dpi=Phylo.draw(tree,branch_labels=lambda c: c.branch_length,do_show=False))#false because we do not display the tree with pylab

def get_consensus(alignment,threshold = 0.7):
	"""
	Gets the consensus sequence from the alignment

	:param alignment: it's an align object

	:param threshold: specifies how common a particular residue has to be at a position before it is added. Default value 0.7 (meaning 70%).

	:returns: consensus it's a seq object
	"""
	summary_align = AlignInfo.SummaryInfo(alignment)
	consensus = summary_align.dumb_consensus(threshold)
	return consensus

def tree_to_str(input_file):
	"""
	Shows the tree based in PhyloTree file (*.dnd) as a String

	:param input_file: it's the name of a PhyloTree file. Ex.: "opuntia.dnd" 
	
	:returns: tree data as String
	"""
	tree = Phylo.read(input_file, "newick");
	out_handle_str = StringIO();
	Phylo.draw_ascii(tree, out_handle_str);
	str = out_handle_str.getvalue();
	out_handle_str.close();
	return str;
